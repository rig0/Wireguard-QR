name: Push to main workflow

on:
  push:
    branches:
      - main

jobs:
  push-main:
    runs-on: CodeServer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Update Version
        run: |
          # Get current version from the VERSION file
          current_version=$(cat VERSION)
          IFS='.' read -ra VERSION <<< "$current_version"

          # Increment patch version
          new_version="${VERSION[0]}.${VERSION[1]}.$((VERSION[2]+1))"

          # Update the VERSION file
          echo "$new_version" > VERSION
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

          # Update the version in package.json
          jq ".version = \"$new_version\"" package.json > package.json.tmp && mv package.json.tmp package.json

          # Regenerate package-lock.json to reflect the new version
          npm install

          # Commit changes
          git add VERSION package.json package-lock.json
          git commit -m "Bump version to $new_version"

          # Tag the new version
          git tag "v$new_version"

          # Push changes and the new tag
          git push https://rambo:${{ secrets.GITEA_PAT }}@rigslab.com/Rambo/Wireguard-QR.git main
          git push https://rambo:${{ secrets.GITEA_PAT }}@rigslab.com/Rambo/Wireguard-QR.git "v$new_version"


      - name: Shut down running dev container
        run: |
          ssh-keyscan -H Dev-Stack.home.arpa >> ~/.ssh/known_hosts
          ssh rambo@Dev-Stack.home.arpa "./runner/clean-wireguard-qr.sh"

      - name: Pull new version to dev server & run
        run: |
          ssh rambo@Dev-Stack.home.arpa "
          git clone git@ssh.rigslab.com:Rambo/Wireguard-QR.git /tmp/wireguard-qr 
          rm -rf /opt/stacks/wireguard-qr-dev/* && cp -R /tmp/wireguard-qr/* /opt/stacks/wireguard-qr-dev
          cd /opt/stacks/wireguard-qr-dev && sudo docker-compose up -d
          rm -R /tmp/wireguard-qr
          "

      - name: Confirm the container is running
        run: |
          ssh rambo@Dev-Stack.home.arpa "
          echo 'NEW_VERSION is $NEW_VERSION'
          for i in {1..10}; do
            if curl -s http://localhost:5182 > /dev/null; then
              version=\$(curl -s http://localhost:5182/api/version | jq -r '.version')
              echo 'Running version: \$version'
              echo 'Expected version: \$NEW_VERSION'
              if [ \"\$version\" == \"\$NEW_VERSION\" ]; then
                echo \"Container is up and running version \$version\"
                exit 0
              else
                echo 'Container is up but running an older version \$version. Something went wrong.'
                exit 1
              fi
            fi
            echo 'Waiting for container to be ready... (\$i/10)'
            sleep 5
          done
          echo 'Container did not start in time.'
          exit 1
          "

      - name: Tag and upload new latest docker image
        run: |
          ssh rambo@Dev-Stack.home.arpa "
          sudo docker tag wireguard-qr:source dock.rigslab.com/wireguard-qr:latest
          sudo docker push dock.rigslab.com/wireguard-qr:latest
          "
        
      - name: Send notification on success
        if: success()
        run: /home/rambo/app-updated.sh "Wireguard-QR updated to $NEW_VERSION"

      - name: Send notification on failure
        if: failure()
        run: /home/rambo/app-updated.sh "Wireguard-QR Build $NEW_VERSION FAILED"