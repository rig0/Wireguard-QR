<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WireGuard QR Generator</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="icon" type="image/png" href="/favicon/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon/favicon.svg" />
    <link rel="shortcut icon" href="/favicon/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="Wireguard QR" />
    <link rel="manifest" href="/favicon/site.webmanifest" />
</head>
<body>
    <div class="container">
        <br>
        <img src="/css/wg-qr.png" alt="App Icon" class="icon">

        <!-- WireGuard Form -->
        <form id="wireguard-form">
            <h2>Interface</h2>
            <label>PrivateKey</label>
            <input type="password" name="PrivateKey" required>
            
            <label>Address</label>
            <input type="text" name="Address" required>
            
            <label>DNS</label>
            <input type="text" name="DNS" required>
            
            <h2>Peer</h2>
            <label>PublicKey</label>
            <input type="text" name="PublicKey" required>
            
            <label>PreSharedKey</label>
            <input type="password" name="PreSharedKey">
            
            <label>AllowedIPs</label>
            <input type="text" name="AllowedIPs" required>
            
            <label>PersistentKeepAlive</label>
            <input type="text" name="PersistentKeepAlive">
            
            <label>Endpoint</label>
            <input type="text" name="Endpoint" required>
            
            <button type="submit">Create QR</button>
        </form>
        <br>
        <br>

        <!-- Generate Keys Section -->
        <form id="key-gen-form">
            <h2>Generate Keys</h2>
            <label>Private Key</label>
            <input type="password" id="generatedPrivateKey" readonly onclick="copyToClipboard('generatedPrivateKey')">
            
            <label>Public Key</label>
            <input type="text" id="generatedPublicKey" readonly onclick="copyToClipboard('generatedPublicKey')">
            
            <button type="button" id="generateKeysButton">Generate Keys</button>
        </form>
        <br>
        <br>

        <!-- Upload Config Form -->
        <form id="upload-form">
            <h2>Upload</h2>
            <label for="configFile">Upload Config File</label>
            <input type="file" id="configFile" name="configFile" accept=".conf" required>
            <button type="button" id="uploadButton">Generate QR</button>
        </form>
        <br>
        <br>
    </div>
    
    <!-- QR Code Popup -->
    <div id="qr-popup" class="popup">
        <div class="popup-content">
            <span id="close-popup">&times;</span>
            <h2>Generated QR Code</h2>
            <img id="qr-code-image" alt="QR Code">
        </div>
    </div>
    
    <script>
        // Handle QR code generation from WireGuard form
        const form = document.getElementById('wireguard-form');
        const popup = document.getElementById('qr-popup');
        const closePopup = document.getElementById('close-popup');
        const qrCodeImage = document.getElementById('qr-code-image');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            const response = await fetch('/create-qr', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            if (result.qrCode) {
                qrCodeImage.src = result.qrCode;
                popup.style.display = 'block';
                form.reset();
            }
        });

        // Handle QR code generation from upload
        document.getElementById('uploadButton').addEventListener('click', () => {
            const fileInput = document.getElementById('configFile');
            if (fileInput.files.length === 0) {
                alert("Please select a configuration file to upload.");
                return;
            }

            const reader = new FileReader();
            reader.onload = function (event) {
                const configContent = event.target.result;

                fetch('/generate-qr', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ config: configContent })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.qrCode) {
                        qrCodeImage.src = data.qrCode;
                        popup.style.display = 'block';
                    } else {
                        alert("Failed to generate QR code.");
                    }
                })
                .catch(error => console.error('Error:', error));
            };

            reader.readAsText(fileInput.files[0]);
        });

        // Generate Keys Section
        document.getElementById('generateKeysButton').addEventListener('click', async () => {
            try {
                // Make the request to the server to generate keys
                const response = await fetch('/generate-keys', {method: 'POST'});
                if (!response.ok) {
                    throw new Error('Failed to generate keys. Server responded with ' + response.status);
                }

                // Parse the JSON response
                const keys = await response.json();

                // Populate the inputs with the generated keys
                const privateKeyInput = document.getElementById('generatedPrivateKey');
                const publicKeyInput = document.getElementById('generatedPublicKey');

                privateKeyInput.value = keys.privateKey || 'Error generating Private Key';
                publicKeyInput.value = keys.publicKey || 'Error generating Public Key';

            } catch (error) {
                console.error('Error during key generation:', error);
                alert('Error generating keys. Please try again.');
            }
        });

        // Close the popup
        closePopup.addEventListener('click', () => {
            popup.style.display = 'none';
        });

        window.onclick = (event) => {
            if (event.target === popup) {
                popup.style.display = 'none';
            }
        };

        // Copy to clipboard
        function copyToClipboard(elementId) {
        const input = document.getElementById(elementId);

        // Temporarily change type to text to make the text visible for copying
        const originalType = input.type;
        input.type = "text";

        // Select the text inside the input
        input.select();
        input.setSelectionRange(0, 99999); // For mobile devices

        // Execute the copy command
        document.execCommand("copy");

        // Revert back to the original input type (password)
        input.type = originalType;
        }

    </script>
</body>
</html>
